{"version":3,"sources":["Components/NavBar/NavBar.module.css","Containers/Dnd/Dnd.module.css","Components/Restaurant/Restaurant.module.css","Components/NavBar/NavBar.js","Containers/Layout/Layout.js","Containers/Dnd/Draggable.js","Containers/Dnd/Droppable.js","Containers/Dnd/DndTest.js","Components/Restaurant/Restaurants.js","Components/MainPage/MainPage.js","Components/Loader/Loader.js","Components/DetailsPage/DetailsPage.js","ManagerAxios/ManagerAxios.js","Store/action/actionRestaurant.js","Store/action/actionType.js","App.js","Store/reducer/utilReducer.js","Store/reducer/RestaurantsR.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","styles","nav","nav__logo","nav__links","to","style","pointerEvents","Layout","props","this","children","Component","Draggable","dragHandler","event","dataTransfer","setData","target","id","noAllowDropHandler","stopPropagation","draggable","onDragStart","onDragOver","Droppable","onDrop","preventDefault","data","getData","console","log","document","getElementById","appendChild","DndTest","menuNames","restaurant","colors","wrapper","map","name","i","droppableStyle","backgroundColor","key","menu_item","menuItem","coupon","toString","menu_name","Math","random","item","margin","course_name","round","price","toFixed","color","Restaurants","restaurant__List","restaurantsArr","length","value","restaurant_id","onClick","clickHandler","restaurant_name","MainPage","onClickHandler","e","history","push","pathname","state","connect","restaurants","Loader","DetailsPage","ownProps","match","params","filter","parseInt","forEach","menu","includes","getDataFromServer","method","axios","request","url","headers","dataCall","dispatch","process","then","res","menuPromises","dataMenu","ress","jsonData","JSON","parse","replace","NaN","error","jsonHandler","catch","err","Promise","all","type","payload","App","initDataFromApi","route","isLoaded","exact","path","component","actionTypes","updateObject","oldObject","newObject","initialState","reducer","action","Boolean","window","location","hostname","rooReducer","combineReducers","RestaurantsR","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","app","basename","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a7cd3855.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1j9b8\",\"nav__logo\":\"NavBar_nav__logo__1eY5S\",\"nav__links\":\"NavBar_nav__links__KflY8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dnd_wrapper__2a5zH\",\"item\":\"Dnd_item__DSx04\",\"droppableStyle\":\"Dnd_droppableStyle__kPFVE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restaurant__List\":\"Restaurant_restaurant__List__1KJm8\"};","import React from 'react';\r\nimport styles from './NavBar.module.css'\r\nimport {Link} from 'react-router-dom';\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={styles.nav}>\r\n            <div className={styles.nav__logo}>Logo</div>\r\n            <ul className={styles.nav__links}>\r\n                <li><Link to={\"/\"}>Home</Link></li>\r\n                <li><Link to={\"/details/:restaurant_id\"}>Details</Link></li>\r\n                <li><Link style={{pointerEvents: \"none\"}} to={\"/dnd\"} >About</Link></li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport NavBar from \"../../Components/NavBar/NavBar\";\r\nclass Layout extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div>\r\n        <NavBar/>\r\n        {this.props.children}\r\n           \r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Layout;","import React, { Component } from 'react';\r\n\r\nclass Draggable extends Component {\r\n    dragHandler=(event)=>{ \r\n        event.dataTransfer.setData('transfer',event.target.id)\r\n      }\r\n      noAllowDropHandler =(event)=>{\r\n        event.stopPropagation()\r\n      }\r\n    render() {\r\n        return (\r\n            <div \r\n            id={this.props.id} \r\n            draggable={true}\r\n            onDragStart={this.dragHandler}\r\n            onDragOver={this.noAllowDropHandler}>\r\n               {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Draggable;","import React from 'react';\r\n\r\nconst Droppable =(props)=> {\r\n    const dropHandler = (event) =>{\r\n        event.preventDefault()\r\n        const data = event.dataTransfer.getData('transfer');\r\n        console.log(document.getElementById(data));\r\n        \r\n        event.target.appendChild(document.getElementById(data))\r\n    }\r\n    const allowDropHandler=(event)=>{ \r\n        event.preventDefault()\r\n    }\r\n    \r\n        return (\r\n            <div \r\n            className={props.className}\r\n            id={props.id} \r\n            onDrop={dropHandler}\r\n            onDragOver={allowDropHandler}\r\n            style={props.style}\r\n            >\r\n                <h1>{props.id}</h1>\r\n                {props.children}\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default Droppable;","import React from 'react';\r\nimport Draggable from './Draggable';\r\nimport Droppable from './Droppable';\r\nimport styles from './Dnd.module.css'\r\n\r\nconst DndTest = ({ menuNames, restaurant, colors }) => {\r\n    // console.log(colors);\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n\r\n            {menuNames && menuNames.map((name, i) => {\r\n                const droppableStyle = {\r\n                    backgroundColor: colors[i],\r\n\r\n                }\r\n                return (\r\n                    <Droppable className={styles.droppableStyle} key={name} id={name} style={droppableStyle}>\r\n                        {restaurant.menu_item && restaurant.menu_item.map(menuItem => {\r\n                            console.log(menuItem.coupon.toString());\r\n\r\n                            if (menuItem.menu_name === name) {\r\n                                return (\r\n                                    <Draggable id={name + Math.random(100 * 99)}>\r\n\r\n                                        <div className={styles.item} style={{ margin: '8px' }}>\r\n                                            <div>{menuItem.course_name}--${(Math.round(menuItem.price * 100) / 100).toFixed(2)}--</div>\r\n                                            <div style={{ color: \"red\" }}>{menuItem.coupon.toString()!==\"NaN\" && menuItem.coupon}</div>\r\n                                        </div>\r\n                                    </Draggable>\r\n                                )\r\n                            }\r\n                        })}\r\n                    </Droppable>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DndTest;","import React from 'react';\r\nimport styles from './Restaurant.module.css'\r\nconst Restaurants = (props) => {\r\n    return (<div className={\"col align-center\"}>\r\n        <h1>Restaurants</h1>\r\n        <ul className={styles.restaurant__List}>\r\n            {\r\n                props.restaurantsArr && props.restaurantsArr.map(restaurant=>{\r\n                    if(restaurant.menu_item && restaurant.menu_item.length!==0){\r\n                        return (\r\n                            <li \r\n                            value={restaurant.restaurant_id} \r\n                            key={restaurant.restaurant_id}\r\n                            onClick={props.clickHandler}\r\n                            >{restaurant.restaurant_name}</li>\r\n                            )\r\n                    }\r\n                    else return\r\n                })\r\n            }\r\n        </ul>\r\n    </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default Restaurants;","import React, { Component } from 'react';\r\nimport Restaurants from '../Restaurant/Restaurants'\r\nimport { connect } from 'react-redux';\r\nclass MainPage extends Component {\r\n    componentDidMount(){\r\n        console.log(\"ComponentDidMount Main Page\");\r\n        \r\n       \r\n    }\r\n    // this.props.restaurantsArr.filter(restaurant=>{\r\n    //     return restaurant.restaurant_id === e.target.value\r\n    // })[0]\r\n    onClickHandler=(e)=>{\r\n        this.props.history.push({\r\n            pathname:`/details/${e.target.value}`,\r\n            state:{restaurant_id:e.target.value},\r\n            \r\n        })\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div >\r\n                \r\n                <Restaurants clickHandler={this.onClickHandler} restaurantsArr={this.props.restaurantsArr}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps =state=>{\r\n    return {\r\n        restaurantsArr:state.restaurants.restaurantsArr\r\n    }\r\n  }\r\nexport default connect(mapStateToProps) (MainPage);","import React from 'react';\r\n\r\nconst Loader=()=>{\r\n    return(\r\n      <div className={\"loaderContainer\"}>\r\n        <div className=\"loader\"></div>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Loader;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Loader from '../Loader/Loader'\r\nimport DndTest from '../../Containers/Dnd/DndTest'\r\nclass DetailsPage extends Component {\r\n    state={\r\n        restaurant:{\r\n            restaurant_name:\"Please choose a restaurant\"\r\n        }\r\n    }\r\n    render() {\r\n        if(this.props.restaurant){\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <h1>{this.props.restaurant&&this.props.restaurant.restaurant_name || \"Please Choose a Restaurant\" }</h1>\r\n                    <DndTest colors={this.props.colors} menuNames={this.props.menuNames} restaurant={this.props.restaurant} />\r\n                </div>\r\n            );\r\n\r\n        }else return (\r\n            <div className=\"text-center\">\r\n                <h1>{this.props.restaurant&&this.props.restaurant.restaurant_name || \"Please Choose a Restaurant\" }</h1>\r\n                <Loader/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    //get restaurant by id that the component recive from params\r\n    const id = ownProps.match.params.restaurant_id;\r\n    const restaurant = state.restaurants.restaurantsArr.filter(restaurant=>{\r\n        return restaurant.restaurant_id===parseInt(id)})[0]\r\n    //array of menu names \r\n    const menuNames = []\r\n    if(restaurant){\r\n        restaurant.menu_item.forEach(menu=>{\r\n            if(!menuNames.includes(menu.menu_name)){\r\n                menuNames.push(menu.menu_name)\r\n            }\r\n        })\r\n    }       \r\n    return {\r\n        restaurant,\r\n        menuNames,\r\n        colors:state.restaurants.colors,\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(DetailsPage);","import axios from \"axios\";\r\n\r\nexport const getDataFromServer=(data)=>{\r\n    if(data.method === \"get\"){\r\n        return axios.request({\r\n            url:data.url,\r\n            method:data.method,\r\n            data:data.data,\r\n            headers:data.headers,\r\n            params:data.params\r\n        })\r\n    }\r\n    else if(data.method===\"post\"){\r\n        return axios.request({\r\n            url:data.url,\r\n            method:data.method,\r\n            data:data.data,\r\n            headers:data.headers,\r\n            params:data.params\r\n        })\r\n    }\r\n    else if(data.method===\"DELETE\"){\r\n        return axios.request({\r\n            url:data.url,\r\n            method:data.method,\r\n            data:data.data,\r\n            headers:data.headers,\r\n            params:data.params\r\n        })\r\n    }\r\n    else if(data.method===\"PUT\"){\r\n        return axios.request({\r\n            url:data.url,\r\n            method:data.method,\r\n            data:data.data,\r\n            headers:data.headers,\r\n            params:data.params\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const jsonHandler=(jsonData)=>{\r\n    try {\r\n        //Fix the Json replace the NaN without brackets\r\n    const result = JSON.parse(jsonData.replace(/\\bNaN\\b/g, '\"***NaN***\"'), (key, value)=> {\r\n        return value === \"***NaN***\" ? NaN : value;\r\n    });\r\n    // console.log(result.menu_item);\r\n    return result\r\n    } catch (error) {\r\n        // empty array\r\n        // console.log(jsonData.menu_item);\r\n        return jsonData\r\n    }\r\n}","import * as actionType from \"./actionType\"\r\nimport { getDataFromServer, jsonHandler } from '../../ManagerAxios/ManagerAxios'\r\n\r\nexport const RestaurantDataInit = (restaurants) => {\r\n    return {\r\n        type: actionType.RESTAURANT_INIT,\r\n        payload: restaurants\r\n    }\r\n}\r\n\r\nexport const dataCall = () => {\r\n    return (dispatch) => {\r\n        let data = {\r\n            url: \"http://3.222.204.208/restaurants_list\",\r\n            method: \"post\",\r\n            data: { \"app_key\": `${process.env.REACT_APP_CURVE_API_KEY}` },\r\n            headers: \"\",\r\n            params: \"\"\r\n        }\r\n        //get restaurants from api\r\n        getDataFromServer(data).then(res => {\r\n            const menuPromises =res.data.restaurants.map(restaurant => {\r\n                let dataMenu = {\r\n                    url: \"http://3.222.204.208/restaurant_menu\",\r\n                    method: \"post\",\r\n                    data: {\r\n                        \"app_key\": `${process.env.REACT_APP_CURVE_API_KEY}`,\r\n                        \"restaurant_id\": `${restaurant.restaurant_id}`,\r\n                    },\r\n                    headers: \"\",\r\n                    params: \"\"\r\n                }\r\n                //get each restaurant menu\r\n                return getDataFromServer(dataMenu).then(ress => {\r\n                    //return { restaurant_id:Number , restaurant_name:String , menu_item:Array , }\r\n                    let obj = { ...restaurant, ...jsonHandler(ress.data) }\r\n                    return obj\r\n                    // optional to push each res one by one\r\n                    // dispatch(RestaurantDataInit(obj))\r\n                })\r\n                    .catch(err => { console.log(err); })\r\n            })\r\n            Promise.all(menuPromises).then(data=>{\r\n                //return array of data\r\n                dispatch(RestaurantDataInit(data))\r\n            })\r\n            \r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n}\r\n\r\n","export const RESTAURANT_INIT=\"get restaurant api data\";\r\nexport const MENU_INIT=\"get menu api data\"","import React, { Component } from 'react';\nimport Layout from \"./Containers/Layout/Layout\";\nimport { Switch, Route } from \"react-router-dom\";\nimport DndTest from './Containers/Dnd/DndTest'\nimport MainPage from './Components/MainPage/MainPage';\nimport DetailsPage from './Components/DetailsPage/DetailsPage';\nimport Loader from './Components/Loader/Loader'\nimport { connect } from 'react-redux'\nimport * as actionTypes from './Store/action/Index';\nimport {getDataFromServer} from './ManagerAxios/ManagerAxios';\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.initDataFromApi()\n\n    \n\n\n  }\n  render() {\n    \n    const route = (\n      <Switch>\n        {this.props.isLoaded ? <Route exact path=\"/\" component={MainPage} /> : <Route exact path=\"/\" component={()=><Loader/>}/>}\n        <Route path=\"/details/:restaurant_id\" component={DetailsPage} />\n        <Route path=\"/dnd\" component={DndTest} />\n\n      </Switch>\n    )\n    return (\n\n      <Layout>\n        {route}\n      </Layout>\n    );\n  }\n}\nconst mapStateToProps =state=>{\n  return {\n    isLoaded:state.restaurants.isLoaded\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    initDataFromApi: () => { dispatch(actionTypes.dataCall()) }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","export const updateObject = (oldObject,newObject)=>{\r\n    return {\r\n        ...oldObject,\r\n        ...newObject\r\n    }\r\n}","import * as actionType from \"../action/actionType\"\r\nimport { updateObject } from \"./utilReducer\"\r\nconst initialState = {\r\n   restaurantsArr:[],\r\n   colors:[\"#0288D1\",\"#B3E5FC\",\"#FFFFFF\",\"#03A9F4\",\"#8BC34A\",\"#212121\",\"#757575\",\"#BDBDBD\"],\r\n   isLoaded:false\r\n} \r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case actionType.RESTAURANT_INIT:{  \r\n        // optional to push each res one by one {restaurantsArr:[...state.restaurantsArr,action.payload]} ***check actions***\r\n          return updateObject(state,{restaurantsArr:action.payload,isLoaded:true})\r\n        }\r\n      \r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport default reducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {HashRouter} from 'react-router-dom'\nimport thunk from 'redux-thunk'\nimport RestaurantsR from \"./Store/reducer/RestaurantsR\"\nimport { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\nconst rooReducer = combineReducers({\n    restaurants: RestaurantsR\n\n});\nconst composeEnhancers = process.env.NODE_ENV === \"development\" ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\nconst store = createStore(rooReducer, composeEnhancers(applyMiddleware(thunk)));\n\n\n\nconst app = (<Provider store={store}>\n    <HashRouter basename='/'>\n        <App />\n    </HashRouter>\n</Provider>)\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}